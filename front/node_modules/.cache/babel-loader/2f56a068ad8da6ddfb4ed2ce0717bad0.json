{"ast":null,"code":"const MY_HEADERS = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json'\n};\nexport const apiGetChannel = async (username, channels) => {\n  try {\n    const readValues = await fetch(`http://localhost:3001/channels/${username}`, {\n      headers: MY_HEADERS,\n      mode: 'cors',\n      method: 'GET'\n    });\n\n    if (readValues.ok) {\n      const res = await readValues.json();\n      channels(res);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const apiCreateChannel = async (username, channel, error) => {\n  try {\n    const readValues = await fetch(`http://localhost:3001/channels`, {\n      headers: MY_HEADERS,\n      mode: 'cors',\n      method: 'POST',\n      body: JSON.stringify({\n        username: username,\n        name: channel\n      })\n    });\n\n    if (readValues.ok) {\n      const res = await readValues.json();\n      console.log(res);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const apiPostUser = async (username, email, password, succes, erreur) => {\n  try {\n    const postValues = await fetch(`http://localhost:3001/users`, {\n      headers: MY_HEADERS,\n      mode: 'cors',\n      method: 'POST',\n      body: JSON.stringify({\n        username: username,\n        email: email,\n        password: password\n      })\n    });\n\n    if (postValues.ok) {\n      const res = await postValues.json();\n      console.log(res);\n      succes(res);\n    } else {\n      const res = await postValues.json();\n      erreur(res);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const apiLogin = async (username, password, loggedIn, erreur) => {\n  try {\n    const postValues = await fetch(`http://localhost:3001/login`, {\n      headers: MY_HEADERS,\n      mode: 'cors',\n      method: 'POST',\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    });\n\n    if (postValues.ok) {\n      const res = await postValues.json();\n      loggedIn(res);\n    } else {\n      const res = await postValues.json();\n      erreur(res);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const apiGetEmail = async (username, reponse, erreur) => {\n  try {\n    const postValues = await fetch(`http://localhost:3001/email/${username}`, {\n      headers: MY_HEADERS,\n      mode: 'cors',\n      method: 'GET'\n    });\n\n    if (postValues.ok) {\n      const res = await postValues.json();\n      reponse(res);\n    } else {\n      const res = await postValues.json();\n      erreur(res);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const apiAddUser = async (username, chan, succes, err) => {\n  try {\n    const postValues = await fetch(`http://localhost:3001/add/`, {\n      headers: MY_HEADERS,\n      mode: 'cors',\n      method: 'POST',\n      body: JSON.stringify({\n        username: username,\n        channel: chan\n      })\n    });\n\n    if (postValues.ok) {\n      const res = await postValues.json();\n      succes(res);\n    } else {\n      const res = await postValues.json();\n      err(res);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/home/duck/Documents/tweb/messenger2/front/src/utils/api_users.js"],"names":["MY_HEADERS","apiGetChannel","username","channels","readValues","fetch","headers","mode","method","ok","res","json","error","console","log","apiCreateChannel","channel","body","JSON","stringify","name","apiPostUser","email","password","succes","erreur","postValues","apiLogin","loggedIn","apiGetEmail","reponse","apiAddUser","chan","err"],"mappings":"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","sourcesContent":["const MY_HEADERS = { 'Accept': 'application/json', 'Content-Type': 'application/json' }\n\nexport const apiGetChannel = async(username, channels) => {\n    try {\n        const readValues = await fetch(`http://localhost:3001/channels/${username}`, { headers: MY_HEADERS, mode: 'cors', method: 'GET' })\n\n        if(readValues.ok) {\n            const res = await readValues.json()\n            channels(res)\n        }\n    }\n    catch (error) {\n        console.log(error)\n    }\n}\n\nexport const apiCreateChannel = async(username, channel, error) => {\n    try {\n        const readValues = await fetch(`http://localhost:3001/channels`, { headers: MY_HEADERS, mode: 'cors', method: 'POST',\n                                                                           body: JSON.stringify({\n                                                                               username: username,\n                                                                               name: channel\n                                                                           })})\n\n        if(readValues.ok) {\n            const res = await readValues.json()\n            console.log(res)\n        }\n    }\n    catch (error) {\n        console.log(error)\n    }\n}\n\nexport const apiPostUser = async(username, email, password, succes, erreur) => {\n    try {\n        const postValues = await fetch(`http://localhost:3001/users`, { headers: MY_HEADERS, mode: 'cors', method: 'POST',\n                                                                        body: JSON.stringify({\n                                                                            username: username,\n                                                                            email: email,\n                                                                            password: password}) })\n\n        if(postValues.ok) {\n            const res = await postValues.json()\n            console.log(res)\n            succes(res)\n        }\n        else {\n            const res = await postValues.json()\n            erreur(res)\n        }\n    }\n    catch (error) {\n        console.log(error)\n    }\n}\n\n\nexport const apiLogin = async(username, password, loggedIn, erreur) => {\n    try {\n        const postValues = await fetch(`http://localhost:3001/login`, { headers: MY_HEADERS, mode: 'cors', method: 'POST',\n                                                                        body: JSON.stringify({\n                                                                            username: username,\n                                                                            password: password}) })\n\n        if(postValues.ok) {\n            const res = await postValues.json()\n            loggedIn(res)\n        }\n        else {\n            const res = await postValues.json()\n            erreur(res)\n        }\n    }\n    catch (error) {\n        console.log(error)\n    }\n}\n\nexport const apiGetEmail = async(username, reponse, erreur) => {\n    try {\n        const postValues = await fetch(`http://localhost:3001/email/${username}`, { headers: MY_HEADERS, mode: 'cors', method: 'GET'})\n\n        if(postValues.ok) {\n            const res = await postValues.json()\n            reponse(res)\n        }\n        else {\n            const res = await postValues.json()\n            erreur(res)\n        }\n    }\n    catch (error) {\n        console.log(error)\n    }\n}\n\nexport const apiAddUser = async(username, chan, succes, err) => {\n    try {\n        const postValues = await fetch(`http://localhost:3001/add/`, { headers: MY_HEADERS, mode: 'cors', method: 'POST',\n                                                                       body: JSON.stringify({\n                                                                            username: username,\n                                                                            channel: chan\n                                                                            })})\n\n        if(postValues.ok) {\n            const res = await postValues.json()\n            succes(res)\n        }\n        else {\n            const res = await postValues.json()\n            err(res)\n        }\n    }\n    catch (error) {\n        console.log(error)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}