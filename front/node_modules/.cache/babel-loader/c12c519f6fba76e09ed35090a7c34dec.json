{"ast":null,"code":"const MY_HEADERS = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json'\n};\nexport const apiGetChannel = async () => {\n  try {\n    const readValues = await fetch(`http://localhost:3001/channels`, {\n      headers: MY_HEADERS,\n      mode: 'cors',\n      method: 'GET'\n    });\n\n    if (readValues.ok) {\n      const res = await readValues.json();\n      console.log(res);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const apiCreateChannel = async (username, error) => {\n  try {\n    const readValues = await fetch(`http://localhost:3001/channels`, {\n      headers: MY_HEADERS,\n      mode: 'cors',\n      method: 'POST',\n      body: JSON.stringify({\n        username: username\n      })\n    });\n\n    if (readValues.ok) {\n      const res = await readValues.json();\n      console.log(res);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const apiPostUser = async (username, email, password, erreur) => {\n  try {\n    const postValues = await fetch(`http://localhost:3001/users`, {\n      headers: MY_HEADERS,\n      mode: 'cors',\n      method: 'POST',\n      body: JSON.stringify({\n        username: username,\n        email: email,\n        password: password\n      })\n    });\n\n    if (postValues.ok) {\n      const res = await postValues.json();\n      console.log(res);\n    } else {\n      const res = await postValues.json();\n      erreur(res);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const apiLogin = async (username, password, loggedIn, erreur) => {\n  try {\n    const postValues = await fetch(`http://localhost:3001/login`, {\n      headers: MY_HEADERS,\n      mode: 'cors',\n      method: 'POST',\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    });\n\n    if (postValues.ok) {\n      const res = await postValues.json();\n      loggedIn(res);\n    } else {\n      const res = await postValues.json();\n      erreur(res);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/home/duck/Documents/tweb/messenger2/front/src/utils/api_users.js"],"names":["MY_HEADERS","apiGetChannel","readValues","fetch","headers","mode","method","ok","res","json","console","log","error","apiCreateChannel","username","body","JSON","stringify","apiPostUser","email","password","erreur","postValues","apiLogin","loggedIn"],"mappings":"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","sourcesContent":["const MY_HEADERS = { 'Accept': 'application/json', 'Content-Type': 'application/json' }\n\nexport const apiGetChannel = async() => {\n    try {\n        const readValues = await fetch(`http://localhost:3001/channels`, { headers: MY_HEADERS, mode: 'cors', method: 'GET' })\n\n        if(readValues.ok) {\n            const res = await readValues.json()\n            console.log(res)\n        }\n    }\n    catch (error) {\n        console.log(error)\n    }\n}\n\nexport const apiCreateChannel = async(username, error) => {\n    try {\n        const readValues = await fetch(`http://localhost:3001/channels`, { headers: MY_HEADERS, mode: 'cors', method: 'POST',\n                                                                           body: JSON.stringify({\n                                                                               username: username\n                                                                           })})\n\n        if(readValues.ok) {\n            const res = await readValues.json()\n            console.log(res)\n        }\n    }\n    catch (error) {\n        console.log(error)\n    }\n}\n\nexport const apiPostUser = async(username, email, password, erreur) => {\n    try {\n        const postValues = await fetch(`http://localhost:3001/users`, { headers: MY_HEADERS, mode: 'cors', method: 'POST',\n                                                                        body: JSON.stringify({\n                                                                            username: username,\n                                                                            email: email,\n                                                                            password: password}) })\n\n        if(postValues.ok) {\n            const res = await postValues.json()\n            console.log(res)\n        }\n        else {\n            const res = await postValues.json()\n            erreur(res)\n        }\n    }\n    catch (error) {\n        console.log(error)\n    }\n}\n\n\nexport const apiLogin = async(username, password, loggedIn, erreur) => {\n    try {\n        const postValues = await fetch(`http://localhost:3001/login`, { headers: MY_HEADERS, mode: 'cors', method: 'POST',\n                                                                        body: JSON.stringify({\n                                                                            username: username,\n                                                                            password: password}) })\n\n        if(postValues.ok) {\n            const res = await postValues.json()\n            loggedIn(res)\n        }\n        else {\n            const res = await postValues.json()\n            erreur(res)\n        }\n    }\n    catch (error) {\n        console.log(error)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}